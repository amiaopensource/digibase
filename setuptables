#!/bin/bash

#get digibase_functions
SCRIPTDIR=$(dirname "${0}")
. "${SCRIPTDIR}/digibase_functions" || { echo "Missing '${SCRIPTDIR}/digibase_functions'. Exiting." ; exit 1 ;};

usage(){
    echo
    echo "$(basename ${0}) ${version}"
    echo "$(basename "${0}") Uses MySQL to create a database for tape digitizations."
    echo "Usage: $(basename $0) [ -h ]"
    echo "  -h ( display this help menu )"
    echo "  -r ( enable run mode [default] )"
    echo "  -x ( reset the configuration, this will clear the default configuration file at ${digibase_config_file} and create a new one)"
    exit
}

# command-line options to set mediaid and original variables
OPTIND=1
while getopts "herpx" opt ; do
    case "${opt}" in
        h) usage ;;
        r) runtype="run";;
        x) runtype="reset" ;;
        *) report -w "bad option -$OPTARG" ; usage ;;
        :) report -w "Option -$OPTARG requires an argument" ; exit 1 ;;
    esac
done

# read configuration file or create one
if [[ -f "${digibase_config_file}" ]] ; then
    . "${digibase_config_file}"
else
    echo -e "No configuration file. Restarting."
    touch "${digibase_config_file}"
    $(basename "${0}") -x
fi

# option for resetting config file
if [[ "${runtype}" = "reset" ]] ; then
 report -q -n "Reseting the configuration will clear ${digibase_config_file}. Please enter [Y] to confirm: "
  read reset_response
   if [[ "${reset_response}" = "Y" || "${reset_response}" = "y" ]] ; then
    report -d "Clearing ${digibase_config_file}."
     echo -n "" > "${digibase_config_file}"
    else
       report -d "Reset aborted. Exiting."
    exit 0
    fi
fi

# Ask about username, password, database settings
if [ -z "${host_name}" ] ; then
    report -q -n "Enter the host location for the MySQL server: "
    read host_name
fi
if [ -z "${user_name}" ] ; then
    report -q -n "Enter the user name for the MySQL server: "
    read user_name
fi

if [ -z "${password}" ] ; then
    report -q -n "Enter the password for this user on the MySQL server: "
    read password
fi
if [ -z "${database}" ] ; then
    report -q -n "Enter the of the database you want to use on MySQL server: "
    read database
fi

# write to configuration file
        echo "#digibase config file" > "${digibase_config_file}"
        echo "host_name=\"${host_name}\"" >> "${digibase_config_file}"
        echo  >> "${digibase_config_file}"
        echo "user_name=\"${user_name}\"" >> "${digibase_config_file}"
        echo  >> "${digibase_config_file}"
        echo "password=\"${password}\"" >> "${digibase_config_file}"
        echo  >> "${digibase_config_file}"
        echo "database=\"${database}\"" >> "${digibase_config_file}"
        echo  >> "${digibase_config_file}"
        
# give user a summary of what they've chosen
report -d "Summary: host: ${host_name}, user name: ${user_name}, password: ${password}, database: ${database}"
report -q "Press enter if settings look correct"
read

#run the SQL test
#_test_sql
#create the tables
_create_tables

#create a new record when the user starts the digitization (pulls unique ID from vrecord, recording directory, and technician name)

#reads output of vrecord, looks for/parses error messages

#changes digitization_status in table to correct status (digitized w/ errors or w/o errors)

#changes QC status to "awaiting QC"

#Now, onto the QC script...
